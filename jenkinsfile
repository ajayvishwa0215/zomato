pipeline {
    agent any

    tools {
        jdk 'jdk17'
        nodejs 'node23'
    }

    environment {
        SCANNER_HOME = tool 'sonar-scanner'
    }

    stages {
        stage("Clean Workspace") {
            steps { cleanWs() }
        }

        stage("Git Checkout") {
            steps { git branch: 'main', url: 'https://github.com/ajayvishwa0215/zomato.git' }
        }

        stage("SonarQube Analysis") {
            steps {
                withSonarQubeEnv('sonar-server') {
                    sh '''$SCANNER_HOME/bin/sonar-scanner \
                        -Dsonar.projectName=zomato \
                        -Dsonar.projectKey=zomato'''
                }
            }
        }

        stage("Quality Gate") {
            steps {
                waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token'
            }
        }

        stage("Install Dependencies") {
            steps { sh "npm install" }
        }

        stage("Trivy File Scan") {
            steps { sh "trivy fs . > trivy.txt" }
        }

        stage("Build & Push Docker Image") {
            steps {
                withDockerRegistry(credentialsId: 'docker', url: 'https://index.docker.io/v1/') {
                    sh '''
                        docker build -t zomato .
                        docker tag zomato ajayvishwa0215/zomato:latest
                        docker push ajayvishwa0215/zomato:latest
                    '''
                }
            }
        }

        stage("Deploy to Kubernetes") {
            steps {
                sh '''
                    # Start Minikube (existing driver used automatically)
                    minikube start || true

                    # Apply Kubernetes manifests (image pulled from DockerHub)
                    kubectl apply -f Kubernetes/

                    # Wait for deployment to complete
                    kubectl rollout status deployment/zomato

                    # Print access URL
                    minikube service zomato --url
                '''
            }
        }
    }

    post {
        always {
            emailext(
                subject: "${currentBuild.result} - ${env.JOB_NAME}",
                body: "Build #${env.BUILD_NUMBER} result: ${currentBuild.result}\n${env.BUILD_URL}",
                to: 'ajayvishwa0215@gmail.com',
                attachmentsPattern: 'trivy.txt'
            )
        }
    }
}
